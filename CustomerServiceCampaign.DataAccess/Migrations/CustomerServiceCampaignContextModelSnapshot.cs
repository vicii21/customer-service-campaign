// <auto-generated />
using System;
using CustomerServiceCampaign.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerServiceCampaign.DataAccess.Migrations
{
    [DbContext(typeof(CustomerServiceCampaignContext))]
    partial class CustomerServiceCampaignContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("state_id");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("zip");

                    b.HasKey("ID");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("address");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Agent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<long?>("Salary")
                        .HasColumnType("bigint")
                        .HasColumnName("salary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("agent");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("city");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Color", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("color_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ColorName")
                        .IsUnique();

                    b.ToTable("color");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Credentials", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("password");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("credentials");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerDiscountId")
                        .HasColumnType("int")
                        .HasColumnName("customer_discount_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("customer");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.CustomerDiscount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DiscountExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(15);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AgentId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("customer_discount");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.LogEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Actor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("actor");

                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasColumnName("actor_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UseCaseData")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("use_case_data");

                    b.Property<string>("UseCaseName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("use_case_name");

                    b.HasKey("ID");

                    b.ToTable("log_entry");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerDiscountId")
                        .HasColumnType("int")
                        .HasColumnName("customer_discount_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CustomerDiscountId");

                    b.HasIndex("ServiceId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<int>("HomeAddressId")
                        .HasColumnType("int")
                        .HasColumnName("house_address_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("OfficeAddressId")
                        .HasColumnType("int")
                        .HasColumnName("office_address_id");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("char(11)")
                        .HasColumnName("social_security_number");

                    b.Property<int?>("SpouseId")
                        .HasColumnType("int")
                        .HasColumnName("spouse_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("HomeAddressId");

                    b.HasIndex("OfficeAddressId");

                    b.HasIndex("SSN")
                        .IsUnique();

                    b.HasIndex("SpouseId");

                    b.ToTable("person");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.PersonColor", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("person_color");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.PersonUseCase", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<int>("UseCaseId")
                        .HasColumnType("int")
                        .HasColumnName("use_case_id");

                    b.HasKey("PersonId", "UseCaseId");

                    b.ToTable("person_use_case");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("service_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ServiceName")
                        .IsUnique();

                    b.ToTable("service");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("1");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("state_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("state");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Address", b =>
                {
                    b.HasOne("CustomerServiceCampaign.Domain.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerServiceCampaign.Domain.Entities.State", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Agent", b =>
                {
                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Person", "Person")
                        .WithOne("Agent")
                        .HasForeignKey("CustomerServiceCampaign.Domain.Entities.Agent", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Credentials", b =>
                {
                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Person", "Person")
                        .WithOne("Credentials")
                        .HasForeignKey("CustomerServiceCampaign.Domain.Entities.Credentials", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Customer", b =>
                {
                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("CustomerServiceCampaign.Domain.Entities.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.CustomerDiscount", b =>
                {
                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Agent", "Agent")
                        .WithMany("CustomerDiscounts")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Customer", "Customer")
                        .WithOne("CustomerDiscount")
                        .HasForeignKey("CustomerServiceCampaign.Domain.Entities.CustomerDiscount", "CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Order", b =>
                {
                    b.HasOne("CustomerServiceCampaign.Domain.Entities.CustomerDiscount", "CustomerDiscount")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerDiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Service", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerDiscount");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Person", b =>
                {
                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Address", "HomeAddress")
                        .WithMany("HomePersons")
                        .HasForeignKey("HomeAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Address", "OfficeAddress")
                        .WithMany("OfficePersons")
                        .HasForeignKey("OfficeAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Person", "Spouse")
                        .WithMany("SpousePersons")
                        .HasForeignKey("SpouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HomeAddress");

                    b.Navigation("OfficeAddress");

                    b.Navigation("Spouse");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.PersonColor", b =>
                {
                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Color", "Color")
                        .WithMany("PersonColor")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Person", "Person")
                        .WithMany("ColorPerson")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.PersonUseCase", b =>
                {
                    b.HasOne("CustomerServiceCampaign.Domain.Entities.Person", "Person")
                        .WithMany("PersonUseCases")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Address", b =>
                {
                    b.Navigation("HomePersons");

                    b.Navigation("OfficePersons");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Agent", b =>
                {
                    b.Navigation("CustomerDiscounts");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Color", b =>
                {
                    b.Navigation("PersonColor");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerDiscount")
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.CustomerDiscount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Person", b =>
                {
                    b.Navigation("Agent")
                        .IsRequired();

                    b.Navigation("ColorPerson");

                    b.Navigation("Credentials")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("PersonUseCases");

                    b.Navigation("SpousePersons");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.Service", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CustomerServiceCampaign.Domain.Entities.State", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
